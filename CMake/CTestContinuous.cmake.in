set(CTEST_SOURCE_DIRECTORY "@CMAKE_SOURCE_DIR@")
set(CTEST_BINARY_DIRECTORY "@CMAKE_BINARY_DIR@")
set(CTEST_CMAKE_GENERATOR "@CMAKE_GENERATOR@")
set(CTEST_GIT_COMMAND @GIT_EXECUTABLE@)

set(CTEST_BUILD_NAME "@CTEST_BUILD_NAME@")

find_program(HOSTNAME_CMD NAMES hostname)
exec_program(${HOSTNAME_CMD} ARGS OUTPUT_VARIABLE HOSTNAME)
set(CTEST_SITE  "${HOSTNAME}${CTEST_SITE_EXT}")

#
# This macro is to find the branch whose tip is the commit to test.
#
macro(GetBranchName branch_name_var)

  execute_process(COMMAND ${CTEST_GIT_COMMAND} branch -r --contains HEAD --merged HEAD
    WORKING_DIRECTORY ${CTEST_SOURCE_DIRECTORY}
    ERROR_VARIABLE GIT_error
    OUTPUT_VARIABLE remote_branch_name
    OUTPUT_STRIP_TRAILING_WHITESPACE)

  if(NOT ${GIT_error} EQUAL 0)
    message(SEND_ERROR "Command '${CTEST_GIT_COMMAND} branch -r --contains HEAD --merged' failed with output:\n${GIT_error}")
  endif()

  # message("remote branch(es): ${remote_branch_name}")

  string(REGEX MATCH "origin/([^\n]*)" branch_name ${remote_branch_name})

  set(${branch_name_var} ${CMAKE_MATCH_1})

endmacro()


#
# This macro gets the first few digits of the current commit hash.
#
macro(GetCommitHash commit_hash_var)

  execute_process(COMMAND ${CTEST_GIT_COMMAND} log -n 1 --pretty=format:%h HEAD
    WORKING_DIRECTORY ${CTEST_SOURCE_DIRECTORY}
    ERROR_VARIABLE GIT_error
    OUTPUT_VARIABLE ${commit_hash_var}
    OUTPUT_STRIP_TRAILING_WHITESPACE)

  if(NOT ${GIT_error} EQUAL 0)
    message(SEND_ERROR "Command \"${GIT_EXECUTBALE} log -n 1 --pretty=format:\"%h\" HEAD in directory ${CTEST_SOURCE_DIRECTORY} failed with output:\n${GIT_error}")
  endif()

endmacro()


GetBranchName(branch_name)

message("Tested branch: ${branch_name}")

GetCommitHash(commit_hash)

message("Commit hash: ${commit_hash}")

set(CTEST_BUILD_NAME "${CTEST_BUILD_NAME}-${commit_hash}")

ctest_start(Model TRACK ${branch_name})
ctest_build()
ctest_test()
ctest_submit()
